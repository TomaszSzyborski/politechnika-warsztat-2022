plugins {
    id 'java'
    id 'groovy'
    id 'com.diffplug.spotless' version '5.10.0'
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
}

version '1.0'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    jcenter()
}

def lombok = 'org.projectlombok:lombok:1.18.20'
def restAssuredVersion = '4.3.1'
def guiceVersion = '4.2.3'
def slf4jVersion = '2.0.0-alpha1'
def selenideVersion = '5.23.0'
def apachePoiVersion = '4.1.2'
def junit5Version = "5.7.2"

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    implementation group: 'com.codeborne', name: 'selenide', version: selenideVersion
    implementation group: 'org.apache.poi', name: 'poi', version: apachePoiVersion
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: apachePoiVersion
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: restAssuredVersion
    testImplementation group: 'io.rest-assured', name: 'xml-path', version: restAssuredVersion
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.11.1'
    implementation group: 'org.awaitility', name: 'awaitility', version: '4.0.3'
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.0.3'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'

    testImplementation(platform("org.junit:junit-bom:$junit5Version"))
    testImplementation "org.junit.jupiter:junit-jupiter:$junit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"

    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    testImplementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    implementation 'com.github.javafaker:javafaker:1.0.2'
    testImplementation 'com.github.javafaker:javafaker:1.0.2'

    testImplementation 'io.qameta.allure:allure-junit5:2.8.1'
    testImplementation 'io.qameta.allure:allure-gradle:2.8.1'
    testImplementation 'io.qameta.allure:allure-selenide:2.14.0'
    implementation 'com.opencsv:opencsv:5.5.1'
    testImplementation 'com.opencsv:opencsv:5.5.1'

    implementation 'org.apache.commons:commons-configuration2:2.7'
    testImplementation 'org.apache.commons:commons-configuration2:2.7'

    implementation lombok
    annotationProcessor lombok

    testImplementation lombok
    testAnnotationProcessor lombok

    implementation group: 'com.diffplug.spotless', name: 'spotless-plugin-gradle', version: '5.10.0'
}

tasks.withType(Test) {
    systemProperties["junit.jupiter.execution.parallel.enabled"] = true
    systemProperties["junit.jupiter.execution.parallel.config.strategy"] = "fixed"
    systemProperties["junit.jupiter.execution.parallel.mode.default"] = "concurrent"
    systemProperties["junit.jupiter.execution.parallel.config.fixed.parallelism"] = 4
}

allure {
    autoconfigure = true
    aspectjweaver = true
    version = '2.8.1'
}

spotless {
    java {
        target '**/*.java'
        trimTrailingWhitespace()
        endWithNewline()
        removeUnusedImports()
        importOrderFile 'spotlessConfiguration/spotless.importorder'
        eclipse().configFile 'spotlessConfiguration/spotless-configuration.xml'
    }
}

compileJava.dependsOn(spotlessApply)

test {
    useJUnitPlatform()
}


import org.apache.tools.ant.taskdefs.condition.Os

private static final List<String> playSound(String path) {
    return Os.isFamily(Os.FAMILY_WINDOWS) ?
            ["powershell", "Powershell (New-Object Media.SoundPlayer \"${path}\").PlaySync()"]
            : ["bash", "-c", "aplay ${path}"]
}

task soundOnStartUp(type: Exec) {
    def path = project.rootDir.absolutePath + "/sounds/startup.wav"
    commandLine playSound(path)
}

["pass", "fail"].each { status ->
    task("soundOn${status.capitalize()}", type: Exec) {
        onlyIf {
            (localTests.state.failure ? "fail" : "pass") == status
        }
        def path = project.rootDir.absolutePath + "/sounds/${status}.wav"
        commandLine playSound(path)
    }
}

task localTests(type: Test, dependsOn: soundOnStartUp) {
    useJUnitPlatform()
    finalizedBy {
        ["Pass", "Fail"].collect { "soundOn$it" }
    }
}